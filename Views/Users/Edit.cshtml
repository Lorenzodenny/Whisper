@model Whisper.Models.Users

@{
    ViewBag.Title = "Edit";
}




<div class="login-box">
    <h2>Edit</h2>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Users</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.UserId)

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 mt-2">
            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3 precision">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 mt-2 ">
            <div class="input-group">
                @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput" })
                <span class="input-group-text">
                    <i class="bi bi-eye" id="togglePassword"></i>
                </span>
            </div>
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3 precision">
        @Html.Label("Conferma Password", new { @class = "control-label col-md-5" })
        <div class="col-md-10 mt-2 ">
            <div class="input-group">
                <input type="password" class="form-control" id="confirmPasswordInput" name="confermaPassword" />
                <span class="input-group-text">
                    <i class="bi bi-eye" id="toggleConfirmPassword"></i>
                </span>
            </div>
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 mt-2">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 mt-2">
            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10 mt-2">
            @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
        </div>
    </div>

    @if (User.IsInRole("Admin"))
    {
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Stato, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Stato, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Stato, "", new { @class = "text-danger" })
            </div>
        </div>
    }

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.CodiceFiscale, htmlAttributes: new { @class = "control-label col-md-4" })
        <div class="col-md-10 mt-2">
            @Html.EditorFor(model => model.CodiceFiscale, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CodiceFiscale, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3 precision-2">
        <label class="mt-2">Conferma la vecchia pass per modificare</label>
        <div class="input-group">
            @Html.Password("OldPassword", null, new { @class = "form-control", id = "oldPasswordInput", required = "required" })
            <span class="input-group-text">
                <i class="bi bi-eye" id="toggleOldPassword"></i>
            </span>
        </div>
        @Html.ValidationMessage("OldPassword")
    </div>


    <div class="form-group mb-3">
        <div class="col-md-offset-2 col-md-10 d-flex mt-2">
            <input type="submit" value="Save" class="btn btn-default btn-login ms-2 text-white" />
            @Html.ActionLink("Annulla", "Details", "Users", new { id = User.Identity.Name }, new { @class = "btn btn-back ms-3" })
        </div>
    </div>
</div>
    }


</div>

@section scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Gestione del toggle per la password
            const togglePassword = document.getElementById('togglePassword');
            const passwordInput = document.getElementById('passwordInput');
            togglePassword.addEventListener('click', function (e) {
                // Mostra/Nascondi password
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                // Toggle dell'icona occhio/occhio barrato
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });

            // Gestione del toggle per la conferma della password
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const confirmPasswordInput = document.getElementById('confirmPasswordInput');
            toggleConfirmPassword.addEventListener('click', function (e) {
                // Mostra/Nascondi conferma password
                const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                confirmPasswordInput.setAttribute('type', type);
                // Toggle dell'icona occhio/occhio barrato
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });

            // Gestione del toggle per la vecchia password
            const toggleOldPassword = document.getElementById('toggleOldPassword');
            const oldPasswordInput = document.getElementById('oldPasswordInput');
            toggleOldPassword.addEventListener('click', function (e) {
                // Mostra/Nascondi vecchia password
                const type = oldPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                oldPasswordInput.setAttribute('type', type);
                // Toggle dell'icona occhio/occhio barrato
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });

        });
    </script>
}

