@model Whisper.Models.Users

@{
    ViewBag.Title = "Registrazione";
}

<div class="login-container ">
    <div class="login-box ">
        <h2>Benvenuto su Whisper!</h2>
        <h3>Registrati</h3>
        
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.AvatarId)


    <div class="form-horizontal">

        <div class="icon-container text-center mt-4">
            <div>
                <i id="defaultAvatarIcon" class="fa fa-user-circle fa-5x icon"></i>
            </div>

            <div class="d-flex justify-content-center">
                <img id="avatarPreview" src="" class="avatar-img" alt="Avatar" style="display: none; width: 100px; height: 100px;" />
            </div>

            <span type="button" class="btn btn-sm btn-register1 rounded rounded-5 pennello" data-bs-toggle="modal" data-bs-target="#avatarModal">
                <i class="bi bi-brush color-wine "></i>
            </span>
        </div>




        <!-- Modal per la selezione dell'avatar -->
        <div class="modal fade" id="avatarModal" tabindex="-1" aria-labelledby="avatarModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="avatarModalLabel">Scegli il tuo Avatar</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        @if (ViewBag.AvailableAvatars != null)
                        {
                            foreach (var avatar in ViewBag.AvailableAvatars as IEnumerable<Whisper.Models.Avatars>)
                            {
                                <img src="@Url.Content(avatar.Foto)" alt="Avatar" class="selectable-avatar avatar-img m-2" data-id="@avatar.AvatarId" onclick="selectAvatar(this)" />
                            }
                        }
                        else
                        {
                            <p class="text-danger">Non ci sono Avatar disponibili al momento</p>
                        }

                    </div>
                </div>
            </div>
        </div>


        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3 precision">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2 ">
                <div class="input-group">
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "passwordInput", required = "required" })
                    <span class="input-group-text">
                        <i class="bi bi-eye" id="togglePassword"></i>
                    </span>
                </div>
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3 precision">
            @Html.Label("Conferma Password", new { @class = "control-label col-md-5" })
            <div class="col-md-10 mt-2 ">
                <div class="input-group">
                    <input type="password" class="form-control" id="confirmPasswordInput" name="confermaPassword" required="required" />
                    <span class="input-group-text">
                        <i class="bi bi-eye" id="toggleConfirmPassword"></i>
                    </span>
                </div>
            </div>
        </div>


        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.CodiceFiscale, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10 mt-2">
                @Html.EditorFor(model => model.CodiceFiscale, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CodiceFiscale, "", new { @class = "text-danger" })
            </div>
        </div>





        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">L'idea</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>

                            Sono dell'idea che viviamo in un periodo in cui si stà perdendo un pò l'umanità delle persone, e che l'apparenza faccia sempre più da padrona.
                            Nel corso della mia vita ho avuto la possiblità, anche grazie al mio carattere
                            espansivo, di conoscere molte persone. Ognuna di esse aveva una storia ovviamente,
                            e ho notato la facilità con cui a volte, riusciamo ad aprirci e parlare di noi
                            stessi più con gli sconosciuti, che con persone con cui abbiamo legami stretti,
                            penso che questo sia dovuto proprio alla mancanza della preoccupazione dell'essere
                            giudicati.

                            <br />
                            <br />

                            qui nasce la mia idea, che ha già un nome ovvero " Whisper ",
                            dall'inglese bisbigli. Questo sarà un social dove le persone possono interagire, parlare dei propri problemi,
                            delle proprie perplessità, dei propri pensieri in modo totalmente anonimo, e allo stesso modo ricevere commenti da altri utenti sempre in modo anonimo.

                            <br />
                            <br />

                            Perchè l'anonimato ?

                            <br />
                            <br />

                            L'idea è quella di sviluppare un' applicazione che possa aiutare le persone,
                            a prescindere dal loro aspetto esteriore, classe sociale o qualsiasi altra sovrastruttura, un ambiente che innalza le idee,
                            e soprattutto il supporto umano, e il rapporto umano, un ambiente che possa mettere in contatto il banchiere con il contadino,
                            la " bella " con l'escluso. Un contesto che apre le nostre menti ai suggerimenti ed all'ascolto, basandoci sul messaggio, non sul mittente,
                            e a cercare, commentando, di aiutare gli altri senza sapere chi stiamo aiutando. Umanità che interagisce con umanità, questa è l'idea.

                            <br />
                            <br />

                            Così anche quelle persone introverse, che dubitano spesso di se stesse possono sentirsi parte di qualcosa, sentirsi ascoltate.

                            <br />
                            <br />

                            Un sorriso, o una chiacchiera regalata a uno sconosciuto, può salvarci.

                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-back text-white" data-bs-dismiss="modal">Chiudi</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <div class="col-md-10">


                <div class="checkbox">
                    <label>
                        <input type="checkbox" name="acceptTerms" required> Accetto il regolamento
                    </label>
                </div>
            </div>
        </div>

        <div class="d-flex mb-3">
            <input type="submit" value="Registrati" class="btn btn-sm btn-login me-2 text-white" />
            @Html.ActionLink("Go To Login", "Login", "Auth", null, new { @class = "btn btn-sm btn-back text-white" })
        </div>

        <a href="#" class="text-link color-wine fw-bold mb-3 text-decoration-none" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Scopri l'idea dietro all'app 💜
        </a>
    </div>
        }


    </div>
</div>
@section scripts {
    <script>
        function selectAvatar(element) {
            var avatarId = element.getAttribute('data-id');
            var avatarSrc = element.getAttribute('src');

            // Aggiorna il valore del campo nascosto con l'ID dell'avatar selezionato
            document.getElementById('AvatarId').value = avatarId;

            // Ottieni l'icona di default e l'elemento di anteprima dell'avatar
            var defaultAvatarIcon = document.getElementById('defaultAvatarIcon');
            var avatarPreview = document.getElementById('avatarPreview');

            // Nascondi l'icona di default e mostra l'avatar selezionato
            if (defaultAvatarIcon && avatarPreview) {
                defaultAvatarIcon.style.display = 'none'; // Nasconde l'icona di FontAwesome
                avatarPreview.src = avatarSrc;             // Imposta il percorso dell'avatar selezionato
                avatarPreview.style.display = 'block';     // Mostra l'avatar selezionato
            }

            // Chiudi la modal dopo la selezione
            $('#avatarModal').modal('hide');
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Gestione del toggle per la password
            const togglePassword = document.getElementById('togglePassword');
            const passwordInput = document.getElementById('passwordInput');
            togglePassword.addEventListener('click', function (e) {
                // Mostra/Nascondi password
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                // Toggle dell'icona occhio/occhio barrato
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });

            // Gestione del toggle per la conferma della password
            const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
            const confirmPasswordInput = document.getElementById('confirmPasswordInput');
            toggleConfirmPassword.addEventListener('click', function (e) {
                // Mostra/Nascondi conferma password
                const type = confirmPasswordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                confirmPasswordInput.setAttribute('type', type);
                // Toggle dell'icona occhio/occhio barrato
                this.classList.toggle('bi-eye');
                this.classList.toggle('bi-eye-slash');
            });
        });
    </script>

}

