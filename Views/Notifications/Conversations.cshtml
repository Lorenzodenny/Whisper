@model IEnumerable<Whisper.Models.Conversations>

@{
    ViewBag.Title = "Conversazioni";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-3 text-shadow" style="max-height: 90vh; overflow-y: auto;">

    <!-- Inserisci questo codice dove preferisci nel tuo layout HTML esistente -->
    <button class="btn btn-sm btn-warning mb-3" id="openChatBot">💜 Parla con Eliza 💜</button>

    <div class="input-group mb-3">
        <input type="text" class="form-control" id="searchInput" placeholder="Cerca per username..." aria-label="Cerca per username">
        <button class="btn btn-sm btn-secondary" type="button" id="searchButton">Cerca</button>
    </div>





    <!-- Finestra modale per la chat del bot -->
    <div class="modal" id="chatBotModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dimmi come ti senti ❤</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

                </div>
                <div class="modal-body">
                    <div id="chatArea">
                        <!-- Qui vengono visualizzati i messaggi del bot e dell'utente -->
                    </div>
                    <textarea id="userInput" class="form-control" placeholder="Scrivi qui..." style="resize:none"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-sm btn-login" id="sendMessage">Invia</button>
                </div>
            </div>
        </div>
    </div>




    <div id="noResultsMessage" class="alert alert-info" style="display: none;">
        Nessuna chat con l'utente cercato.
    </div>

    @if (!Model.Any())
    {
        <div id="noConversationsMessage" class="alert alert-info text-shadow">Non ci sono conversazioni da mostrare.</div>
    }
    else
    {

        int currentUserId = ViewBag.CurrentUserId;

        foreach (var conversation in Model)
        {
            int otherUserId = conversation.User1Id == currentUserId ? conversation.User2Id : conversation.User1Id;
            var notification = conversation.Notifications
                                .Where(n => n.TriggeredByUserID == otherUserId)
                                .OrderByDescending(n => n.NotificationDate)
                                .FirstOrDefault();

            <div class="card mb-3 cont-3d" data-username="@ViewBag.Users[otherUserId].Username">
                <div class="card-body d-flex justify-content-between align-items-center">
                    <div>

                        <img src="@Url.Content(ViewBag.Users[currentUserId].Avatars.Foto)" alt="Avatar User1" class="user-avatar avatar-img ms-3 d-none d-md-inline" style="width: 50px; height: 50px;" />
                        <a href="@Url.Action("Details", "Users", new { id = currentUserId })" class="fw-bold text-decoration-none color-wine d-none d-md-inline">
                            @ViewBag.Users[currentUserId].Username
                        </a>
                        Hai una conversazione con:
                        <img src="@Url.Content(ViewBag.Users[otherUserId].Avatars.Foto)" alt="Avatar User2" class="user-avatar avatar-img ms-3" style="width: 50px; height: 50px;" />
                        <a href="@Url.Action("Details", "Users", new { id = otherUserId })" class="fw-bold text-decoration-none color-wine">
                            @ViewBag.Users[otherUserId].Username
                        </a>
                    </div>


                    @if (notification != null && !notification.ReadStatus.Value)
                    {

                        int unreadCountForThisConversation = ViewBag.UnreadMessageCounts[conversation.ConversationId];

                        if (unreadCountForThisConversation > 0)
                        {
                            <span class="notification-count">Messaggi ricevuti: @unreadCountForThisConversation</span>
                        }
                        <span>
                            <a href="@Url.Action("Details", "Conversations", new { id = conversation.ConversationId })"
                               class="btn btn-login btn-sm"
                               onclick="markAsRead(@notification.NotificationID, '@Url.Action("Details", "Conversations", new { id = conversation.ConversationId })'); return false;">
                                <i class="bi bi-send"></i> <span class="d-none d-lg-inline">Apri Conversazione</span>
                            </a>

                            <a href="@Url.Action("Delete", "Conversations", new { id = conversation.ConversationId })"
                               class="btn btn-danger"
                               onclick="markAsRead(@notification.NotificationID, '@Url.Action("Delete", "Conversations", new { id = conversation.ConversationId })'); return false;">
                                <i class="bi bi-trash"></i> <span class="d-none d-lg-inline">Elimina</span>
                            </a>
                        </span>

                    }
                    else
                    {
                        <span>
                            <a href="@Url.Action("Details", "Conversations", new { id = conversation.ConversationId })"
                               class="btn btn-login btn-sm">
                                <i class="bi bi-send"></i> <span class="d-none d-lg-inline">Apri Conversazione</span>
                            </a>

                            <a href="@Url.Action("Delete", "Conversations", new { id = conversation.ConversationId })"
                               class="btn btn-danger">
                                <i class="bi bi-trash"></i> <span class="d-none d-lg-inline">Elimina</span>
                            </a>
                        </span>

                    }
                </div>
            </div>
        }
    }
</div>



<script>
    $(document).ready(function () {
        $('#searchInput').on('keyup', function () {
            var value = $(this).val().toLowerCase();
            var found = false;

            $(".card").each(function () {
                var username = $(this).data("username").toString().toLowerCase();
                if (username.indexOf(value) > -1) {
                    $(this).show();
                    found = true;
                } else {
                    $(this).hide();
                }
            });

            if (!found && value !== '') {
                $('#noResultsMessage').show();
                $('#noConversationsMessage').hide();
            } else if (!found && value === '') {
                $('#noResultsMessage').hide();
                // Mostra il messaggio di "nessuna conversazione" solo se non ci sono card
                if (!$(".card").length) {
                    $('#noConversationsMessage').show();
                }
            } else {
                $('#noResultsMessage').hide();
                $('#noConversationsMessage').hide();
            }
        });

        // Gestione chatbot
        $('#openChatBot').click(function () {
            $('#chatBotModal').modal('show');
        });

        $('#sendMessage').click(function () {
            var message = $('#userInput').val();
            $.get('/ChatBot/GetBotResponse', { message: message }, function (data) {
                $('#chatArea').append('<div><span class="color-wine fw-bold">Tu:</span> ' + message + '</div>');
                $('#chatArea').append('<div class="mb-3"><span  class="color-wine fw-bold">Eliza:</span> ' + data.Response + '</div>');
                $('#userInput').val(''); 
            });
        });

        // Se non ci sono conversazioni all'inizio, mostra il messaggio corrispondente
        if (!$(".card").length) {
            $('#noConversationsMessage').show();
        }
    


    // Funzione globale per marcare le notifiche come lette e gestire il reindirizzamento
    window.markAsRead = function(notificationId, redirectTo) {
        $.post('@Url.Action("MarkMessageAsRead")', { notificationId: notificationId }, function(response) {
            if (response.success) {
                window.location.href = redirectTo;
            } else {
                alert(response.message);
            }
        }).fail(function() {
            // In caso di fallimento della richiesta, mostra un messaggio di errore
            alert("Impossibile processare la richiesta al momento.");
        });
    };
});
</script>

