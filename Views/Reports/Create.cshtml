@model Whisper.Models.Reports

@{
    ViewBag.Title = "Create Report";
}

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        Errore interno: @ViewBag.Error
    </div>
}

<div class="login-container">
    <div class="login-box">
        <h2>Spiegaci cosa c'è che non và? 💔</h2>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                @Html.HiddenFor(model => model.PostId)
                @Html.HiddenFor(model => model.CommentId) 
                @Html.HiddenFor(model => model.ReportedByUserId)
                @Html.HiddenFor(model => model.ReportDate, new { @Value = DateTime.Now })

            <div class="form-group">
                <label class="icon fw-bold">Scrivi il tuo Report</label>
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.DescrizioneReport, new { @class = "form-control-area", @rows = "5", @placeholder = "Cosa c'è che non và?", @id = "report-description", @maxlength = "500" })
                    <span id="report-validation-message" class="text-danger" style="display:none;">Il campo Descrizione Report è obbligatorio.</span>
                    <span id="report-char-count" class="text-secondary">0/500</span>
                </div>
            </div>

                <div class="form-group mt-2 ms-6">
                    <div class="d-flex">
                        <input type="submit" value="Riporta" class="btn btn-sm btn-login me-2 text-white" />
                        @Html.ActionLink("Home", "Index", "Posts", null, new { @class = "btn btn-sm btn-back" })
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var reportDescription = document.getElementById('report-description');
        var validationMessageElement = document.getElementById('report-validation-message');
        var charCountElement = document.getElementById('report-char-count');

        // Funzione per aggiornare il conteggio dei caratteri
        function updateCharCount() {
            var textLength = reportDescription.value.length;
            charCountElement.textContent = `${textLength}/500`;
        }

        // Aggiorna il conteggio dei caratteri all'avvio
        updateCharCount();

        // Aggiorna il conteggio dei caratteri ogni volta che l'utente digita
        reportDescription.addEventListener('input', updateCharCount);

        var form = document.querySelector('form');
        form.addEventListener('submit', function (event) {
            if (!reportDescription.value.trim()) {
                validationMessageElement.style.display = 'block';
                event.preventDefault();
            } else {
                validationMessageElement.style.display = 'none';
            }
        });
    });
</script>